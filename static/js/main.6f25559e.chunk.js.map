{"version":3,"sources":["services/requestStatus.ts","actions/index.ts","components/spiner/index.ts","components/spiner/spinner.tsx","components/error-indicator/index.ts","components/error-indicator/error-indicator.tsx","services/bookstore-service.ts","components/bookstore-service-context/bookstore-service-context.ts","components/bookstore-service-context/index.ts","reducers/selectors.ts","components/update-book-form/index.ts","components/update-book-form/update-book-form.tsx","components/add-book-form/index.ts","components/add-book-form/add-book-form.tsx","components/search-field/index.ts","components/search-field/search-field.tsx","components/book-list-item/book-list-item.tsx","components/book-list/index.ts","components/book-list/book-list.tsx","components/pages/catalog-page.tsx","components/shopping-book-cart-item/index.ts","components/shopping-book-cart-item/shopping-book-cart-item.tsx","components/shopping-cart-table/index.ts","components/shopping-cart-table/shopping-cart-table.tsx","components/pages/card-page.tsx","components/pages/main-page.tsx","components/shop-header/index.ts","components/shop-header/shop-header.tsx","components/app/index.ts","components/app/app.tsx","components/error-boundary/index.ts","components/error-boundary/error-boundary.tsx","reducers/book-list.ts","reducers/shopping-cart.ts","reducers/index.ts","store.ts","index.tsx"],"names":["RequestStatus","fetchBooksAsync","service","dispatch","type","payload","PENDING","getBooks","then","data","newBooks","status","FULFILLED","catch","err","error","ERROR","addBookToCatalogAsync","addedBook","addBook","getBookWithParams","title","author","newBook","updateBookInCatalogAsync","updatedBook","updateBook","getBookById","id","addBookToCart","bookId","amount","Spinner","data-testid","ErrorIndicator","BookstoreService","apiBase","a","axios","get","response","Error","toString","encodedTitle","encodeURIComponent","encodedAuthor","headers","Accept","body","JSON","stringify","price","coverImage","post","put","value","MyContext","React","createContext","bookListSelector","state","bookList","books","getCartItemsList","Object","values","shoppingCart","cartItems","getBookItemById","createSelector","itemId","find","book","getTotalSum","reduce","sum","item","bookItem","bookPrice","getTotalAmount","UpdateBookForm","switchDisplayEditForm","serviceValue","useContext","useDispatch","useState","bookUpdated","setBookUpdated","imageSrc","setImageSrc","uploadImage","setUploadImage","schema","yup","shape","required","positive","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","getValues","reset","watch","updatedBookSelector","useSelector","useMemo","watchImage","useEffect","url","imageSource","length","reader","FileReader","readAsDataURL","onload","src","result","getUpdatedImage","className","onSubmit","updateCoverImageValue","newData","setTimeout","htmlFor","alt","width","height","accept","placeholder","message","onClick","AddBookForm","bookAdded","setBookAdded","imageVisible","setImageVisible","test","SearchField","keyword","setKeyword","onChange","e","target","BookListItem","style","testId","addToCartBtnTestId","editBookBtnTestId","event","data-id","BookList","input","setInput","updateBookId","setUpdateBookId","isVisible","setIsVisible","setValue","setUpdateBookFormVisible","useCallback","currentTarget","dataset","Number","setAddBookFormVisible","isAddNewBook","isEditBook","upBookList","loading","savedBookList","filter","toLowerCase","includes","rowRendererItem","index","key","registerChild","scrollTop","ref","el","disableHeight","rowCount","rowHeight","autoHeight","rowRenderer","CatalogPage","ShoppingBookCartItem","idx","bookItemSelector","itemImageTestId","itemTitleTestId","itemAmountTestId","itemPriceTestId","itemAllRemoveBtnTestId","itemRemoveBtnTestId","itemAddBtnTestId","removeAllBooksFromCart","removeBookFromCart","ShoppingCartTable","totalSum","map","ShoppingCardPage","MainPage","ShopHeader","numItems","total","to","App","totalAmount","role","path","component","exact","ErrorBoundary","props","hasErrorValue","hasError","this","setState","children","Component","initialState","action","concat","slice","currentAmount","otherItems","rootReducer","combineReducers","persistConfig","storage","whitelist","persistedReducer","persistReducer","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","persistor","persistStore","bookstoreService","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.6f25559e.chunk.js","sourcesContent":["enum RequestStatus {\n    PENDING = 'Pending',\n    FULFILLED = 'Fulfilled',\n    ERROR = 'Error'\n}\n\nexport default RequestStatus;\n","import BookstoreService, { AddBookData, BookData } from '../services/bookstore-service';\nimport { AppDispatch } from '../store';\nimport RequestStatus from '../services/requestStatus';\n\nexport interface BookListPayloadType {\n    type: string,\n    payload?: Array<BookData>\n\n}\n\ninterface ActionPendingType {\n    payload: RequestStatus,\n    type: string\n}\n\ninterface ActionErrorType {\n    payload: {\n        error: Error,\n        status: RequestStatus\n    },\n    type: string\n}\n\ninterface ActionCartType {\n    payload: {\n        amount: number,\n        bookId: number\n    },\n    type: string\n}\n\ninterface ActionFetchBooksType {\n    payload: {\n        newBooks: Array<BookData>,\n        status: RequestStatus\n    },\n    type: string\n}\n\ninterface ActionAddBookType {\n    payload: {\n            newBook: BookData,\n            status: RequestStatus\n        },\n    type: string\n}\n\n// fetch books catalog actions\n\nexport const fetchBooks = (\n  newBooks: Array<BookData>, status: RequestStatus,\n): ActionFetchBooksType => ({\n  type: 'FETCH_BOOKS_REQUEST_SUCCESS',\n  payload: { newBooks, status },\n});\n\nexport const fetchBooksPending = (): ActionPendingType => ({\n  type: 'FETCH_BOOKS_REQUEST_PENDING',\n  payload: RequestStatus.PENDING,\n});\n\nexport const fetchBooksError = (\n  error: Error, status: RequestStatus,\n): ActionErrorType => ({\n  type: 'FETCH_BOOKS_REQUEST_ERROR',\n  payload: { error, status },\n});\n\nexport const fetchBooksAsync = (\n  service: BookstoreService,\n) => (dispatch: AppDispatch): Promise<ActionErrorType | ActionFetchBooksType> => {\n  dispatch(fetchBooksPending());\n  return service.getBooks()\n    .then((data: Array<BookData>) => dispatch(fetchBooks(data, RequestStatus.FULFILLED)))\n    .catch((err: Error) => dispatch(fetchBooksError(err, RequestStatus.ERROR)));\n};\n\n// add book to catalog actions\n\nexport const addBook = (\n  newBook: BookData, status: RequestStatus,\n): ActionAddBookType => ({\n  type: 'BOOK_ADDED_TO_CATALOG',\n  payload: { newBook, status },\n});\n\nexport const addBookPending = (): ActionPendingType => ({\n  type: 'ADD_BOOKS_REQUEST_PENDING',\n  payload: RequestStatus.PENDING,\n});\n\nexport const addBookError = (\n  error: Error, status: RequestStatus,\n): ActionErrorType => ({\n  type: 'ADD_BOOKS_REQUEST_ERROR',\n  payload: { error, status },\n});\n\nexport const addBookToCatalogAsync = (\n  service: BookstoreService,\n  addedBook: AddBookData,\n) => (dispatch: AppDispatch): Promise<void | ActionErrorType> => {\n  dispatch(addBookPending());\n  return service.addBook(addedBook)\n    .then(() => {\n      service.getBookWithParams(addedBook.title, addedBook.author)\n        .then((data: BookData) => dispatch(addBook(data, RequestStatus.FULFILLED)));\n    })\n    .catch((err: Error) => dispatch(addBookError(err, RequestStatus.ERROR)));\n};\n\n// update book in catalog actions\n\nexport const updateBook = (\n  updatedBook: BookData, status: RequestStatus,\n): {payload: {updatedBook: BookData, status: RequestStatus}, type: string} => ({\n  type: 'BOOK_UPDATED_IN_CATALOG',\n  payload: { updatedBook, status },\n});\n\nexport const updateBookPending = (): ActionPendingType => ({\n  type: 'UPDATE_BOOKS_REQUEST_PENDING',\n  payload: RequestStatus.PENDING,\n});\n\nexport const updateBookError = (\n  error: Error, status: RequestStatus,\n): ActionErrorType => ({\n  type: 'UPDATE_BOOKS_REQUEST_ERROR',\n  payload: { error, status },\n});\n\nexport const updateBookInCatalogAsync = (\n  service: BookstoreService,\n  updatedBook: BookData,\n) => (dispatch: AppDispatch): Promise<void | ActionErrorType> => {\n  dispatch(updateBookPending());\n  return service.updateBook(updatedBook)\n    .then(() => {\n      service.getBookById(updatedBook.id)\n        .then((data: BookData) => dispatch(updateBook(data, RequestStatus.FULFILLED)));\n    })\n    .catch((err: Error) => dispatch(updateBookError(err, RequestStatus.ERROR)));\n};\n\n// add book to card actions\n\nexport const addBookToCart = (\n  bookId: number, amount = 1,\n): ActionCartType => ({\n  type: 'BOOK_ADDED_TO_CART',\n  payload: { bookId, amount },\n});\n\nexport const removeBookFromCart = (\n  bookId: number, amount = -1,\n): ActionCartType => ({\n  type: 'BOOK_REMOVED_TO_CART',\n  payload: { bookId, amount },\n});\n\nexport const removeAllBooksFromCart = (\n  bookId: number, amount = 0,\n): ActionCartType => ({\n  type: 'ALL_BOOKS_REMOVED_TO_CART',\n  payload: { bookId, amount },\n});\n","import Spinner from './spinner';\n\nexport default Spinner;\n","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = (): JSX.Element => <div data-testid=\"spinner\">loading...</div>;\n\nexport default Spinner;\n","import ErrorIndicator from './error-indicator';\n\nexport default ErrorIndicator;\n","import React from 'react';\nimport './error-indicator.css';\n\nconst ErrorIndicator = (): JSX.Element => <div data-testid=\"error\">Error!</div>;\n\nexport default ErrorIndicator;\n","import axios from 'axios';\n\nexport type BookData = {\n  id: number,\n  title: string,\n  author: string,\n  price: number,\n  coverImage: string\n}\n\nexport type AddBookData = {\n  title: string,\n  author: string,\n  price: number,\n  coverImage: string\n}\n\nexport default class BookstoreService {\n    apiBase = 'http://localhost:8000'\n\n    // getBooks = async (): Promise<Array<BookData>> => {\n    //   const res = await fetch(`${this.apiBase}/books`);\n    //   if (!res.ok) {\n    //     throw new Error('My Error message');\n    //   } else return res.json();\n    // }\n\n    getBooks = async (): Promise<Array<BookData>> => axios\n      .get(`${this.apiBase}/books`)\n      .then((response) => response.data)\n      .catch((error) => {\n        throw new Error(error.toString());\n      })\n\n    // getBookWithParams = async (\n    //   title: string,\n    //   author: string,\n    // ): Promise<BookData> => {\n    //   const encodedTitle = encodeURIComponent(title);\n    //   const encodedAuthor = encodeURIComponent(author);\n    //   const res = await fetch(\n    //   `${this.apiBase}/books?title=${encodedTitle}&author=${encodedAuthor}`\n    //   );\n    //   if (!res.ok) {\n    //     throw new Error('My Error message');\n    //   } else return res.json();\n    // }\n\n  getBookWithParams = async (\n    title: string,\n    author: string,\n  ): Promise<BookData> => {\n    const encodedTitle = encodeURIComponent(title);\n    const encodedAuthor = encodeURIComponent(author);\n    return axios\n      .get(`${this.apiBase}/books?title=${encodedTitle}&author=${encodedAuthor}`)\n      .then((response) => response.data)\n      .catch((error) => {\n        throw new Error(error.toString());\n      });\n  }\n\n  // getBookById = async (id: number): Promise<BookData> => {\n  //   const res = await fetch(`${this.apiBase}/books/${id}`);\n  //   if (!res.ok) {\n  //     throw new Error('My Error message');\n  //   } else return res.json();\n  // }\n\n  getBookById = async (id: number): Promise<BookData> => axios\n    .get(`${this.apiBase}/books/${id}`)\n    .then((response) => response.data)\n    .catch((error) => {\n      throw new Error(error.toString());\n    })\n\n  // addBook = async (data: AddBookData): Promise<void> => {\n  //   const res = await fetch(`${this.apiBase}/books`, {\n  //     method: 'POST',\n  //     headers: {\n  //       Accept: 'application/json',\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({\n  //       title: data.title,\n  //       author: data.author,\n  //       price: data.price,\n  //       coverImage: data.coverImage,\n  //     }),\n  //   });\n  //   if (!res.ok) {\n  //     throw new Error('My Error message');\n  //   }\n  // }\n\n  addBook = async (data: AddBookData): Promise<void> => {\n    const headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n    const body = JSON.stringify({\n      title: data.title,\n      author: data.author,\n      price: data.price,\n      coverImage: data.coverImage,\n    });\n    await axios\n      .post(`${this.apiBase}/books`, body, { headers })\n      .catch((error) => {\n        throw new Error(error.toString());\n      });\n  }\n\n  // updateBook = async (data: BookData): Promise<void> => {\n  //   const res = await fetch(`${this.apiBase}/books/${data.id}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       Accept: 'application/json',\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({\n  //       title: data.title,\n  //       author: data.author,\n  //       price: data.price,\n  //       coverImage: data.coverImage,\n  //     }),\n  //   });\n  //   if (!res.ok) {\n  //     throw new Error('My Error message');\n  //   }\n  // }\n\n  updateBook = async (data: BookData): Promise<void> => {\n    const headers = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n    const body = JSON.stringify({\n      title: data.title,\n      author: data.author,\n      price: data.price,\n      coverImage: data.coverImage,\n    });\n    await axios\n      .put(`${this.apiBase}/books/${data.id}`, body, { headers })\n      .catch((error) => {\n        throw new Error(error.toString());\n      });\n  }\n}\n","import React from 'react';\nimport BookstoreService from '../../services/bookstore-service';\n\nconst value = new BookstoreService();\n\nconst MyContext = React.createContext(value);\n\nexport default MyContext;\n","import MyContext from './bookstore-service-context';\n\nexport default MyContext;\n","import { createSelector } from 'reselect';\nimport { RootState } from '.';\nimport { BookData } from '../services/bookstore-service';\n\nexport const bookListSelector = (state: RootState): Array<BookData> => state.bookList.books;\n\nexport const getCartItemsList = (\n  state: RootState,\n): {id: number, amount: number}[] => Object.values(state.shoppingCart.cartItems);\n\nexport const getBookItemById = createSelector(\n  bookListSelector,\n  (books: Array<BookData>) => (\n    itemId: number,\n  ) => books.find((book: BookData) => book.id === itemId),\n);\n\nexport const getTotalSum = createSelector(\n  getCartItemsList,\n  bookListSelector,\n  (\n    cartItems: Array<{id: number, amount: number}>, books: Array<BookData>,\n  ) => cartItems.reduce((sum: number, item: {id: number, amount: number}) => {\n    const book = books.find((bookItem: BookData) => bookItem.id === item.id);\n    const bookPrice = book?.price ?? 0;\n    return sum + item.amount * bookPrice;\n  }, 0),\n);\n\nexport const getTotalAmount = createSelector(\n  getCartItemsList,\n  (\n    cartItems: Array<{id: number, amount: number}>,\n  ) => cartItems.reduce((sum: number, item: {id: number, amount: number}) => sum + item.amount, 0),\n);\n","import UpdateBookForm from './update-book-form';\n\nexport default UpdateBookForm;\n","import React, {\n  FC, useContext, useEffect, useMemo, useState,\n} from 'react';\nimport './update-book-form.css';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { BookData } from '../../services/bookstore-service';\nimport MyContext from '../bookstore-service-context';\nimport { updateBookInCatalogAsync } from '../../actions';\nimport { AppDispatch } from '../../store';\nimport { getBookItemById } from '../../reducers/selectors';\n\ninterface BookItemType {\n    bookId: number,\n    switchDisplayEditForm: (value: boolean) => void\n}\n\ninterface SubmitUpdateBookData {\n  author: string,\n  coverImage: FileList,\n  price: number,\n  title: string\n}\n\nconst UpdateBookForm: FC<BookItemType> = ({ bookId, switchDisplayEditForm }) => {\n  const serviceValue = useContext(MyContext);\n  const dispatch: AppDispatch = useDispatch();\n  const [bookUpdated, setBookUpdated] = useState(false);\n  const [imageSrc, setImageSrc] = useState('');\n  const [uploadImage, setUploadImage] = useState('');\n\n  const schema = yup.object().shape({\n    title: yup.string().required('Book Title should be filled in'),\n    author: yup.string().required('Book Author should be filled in'),\n    price: yup.number().required().positive('Book Price should be positive number'),\n    coverImage: yup.mixed(),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    getValues,\n    reset,\n    watch,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  const updatedBookSelector = useSelector(getBookItemById);\n  const updatedBook = useMemo(() => updatedBookSelector(bookId), [bookId]) as BookData;\n\n  const watchImage = watch('coverImage', updatedBook.coverImage);\n\n  useEffect(() => {\n    const getUpdatedImage = () => {\n      let imageSource = '';\n      if (watchImage.length !== 0) {\n        if (typeof watchImage !== 'string') {\n          if (watchImage[0]) {\n            const reader = new FileReader();\n            reader.readAsDataURL(watchImage[0]);\n            reader.onload = () => {\n              const src = reader.result as string;\n              setImageSrc(src);\n            };\n            imageSource = imageSrc;\n          }\n        } else imageSource = updatedBook.coverImage;\n      } else imageSource = updatedBook.coverImage;\n      return imageSource;\n    };\n    const url = getUpdatedImage() as string;\n    setUploadImage(url);\n  }, [watchImage, imageSrc, updatedBook.coverImage]);\n\n  useEffect(() => {\n    reset({\n      title: updatedBook.title,\n      author: updatedBook.author,\n      price: updatedBook.price,\n    });\n  }, [updatedBook, reset]);\n\n  const onSubmit = (data: SubmitUpdateBookData) => {\n    let updateCoverImageValue: string;\n    if (data.coverImage.length !== 0) {\n      updateCoverImageValue = imageSrc;\n    } else {\n      updateCoverImageValue = updatedBook.coverImage;\n    }\n    const newData = {\n      id: updatedBook.id,\n      title: data.title,\n      author: data.author,\n      price: data.price,\n      coverImage: updateCoverImageValue,\n    };\n    dispatch(updateBookInCatalogAsync(serviceValue, newData))\n      .then(() => setBookUpdated(true));\n\n    setTimeout(() => {\n      setBookUpdated(false);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <form className=\"update-book-form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"update-book-container\">\n          <div className=\"update-book-image-container\">\n            <label htmlFor=\"temp-id\">\n              Book Cover Image\n            </label>\n            <img data-testid=\"update-book-image\" id=\"image2\" alt=\"cover_image2\" width=\"120px\" height=\"200px\" src={uploadImage} />\n            <label className=\"upload-file-btn\" htmlFor=\"file2\">\n              Browse\n              <input data-testid=\"update-book-input-image\" type=\"file\" id=\"file2\" accept=\".png, .jpg, .jpeg\" {...register('coverImage')} />\n            </label>\n            {/* {errors.coverImage && (<p>{errors.coverImage.message}</p>)} */}\n          </div>\n          <div className=\"update-book-group\">\n            <div>\n              <label htmlFor=\"inputTitle\" className=\"title-label\">Book Title</label>\n              <input data-testid=\"edit-book-input-title\" id=\"inputTitle\" type=\"text\" placeholder=\"title\" {...register('title')} />\n              {errors.title && (<p>{errors.title.message}</p>)}\n            </div>\n            <div>\n              <label htmlFor=\"inputAuthor\">Book Author</label>\n              <input data-testid=\"edit-book-input-author\" id=\"inputAuthor\" type=\"text\" placeholder=\"author\" {...register('author')} />\n              {errors.author && (<p>{errors.author.message}</p>)}\n            </div>\n            <div>\n              <label htmlFor=\"inputPrice\">Book Price</label>\n              <input data-testid=\"edit-book-input-price\" id=\"inputPrice\" type=\"number\" placeholder=\"price in $\" {...register('price')} />\n              {errors.price && (getValues('price') === '') && (<p>Book Price should be filled in</p>)}\n              {errors.price && (getValues('price') < 0) && (<p>{errors.price.message}</p>)}\n            </div>\n          </div>\n        </div>\n        <div className=\"update-book-group3\">\n          <input data-testid=\"save-edit-book-btn\" type=\"submit\" value=\"Save changes\" className=\"btn btn-info save-edit-book\" />\n          <button data-testid=\"cancel-edit-book-btn\" className=\"btn btn-info cancel-edit-book\" type=\"button\" onClick={() => switchDisplayEditForm(false)}>\n            Cancel Editing\n          </button>\n        </div>\n      </form>\n      {bookUpdated && (<p className=\"book-added-confirmation\">Book successfully updated</p>)}\n    </div>\n  );\n};\n\nexport default UpdateBookForm;\n","import AddBookForm from './add-book-form';\n\nexport default AddBookForm;\n","import React, {\n  useEffect, useState, useContext,\n} from 'react';\nimport { useForm } from 'react-hook-form';\nimport './add-book-form.css';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { addBookToCatalogAsync } from '../../actions';\nimport MyContext from '../bookstore-service-context/bookstore-service-context';\nimport { AppDispatch } from '../../store';\n\ninterface SubmitAddBookData {\n  author: string,\n  coverImage: FileList,\n  price: number,\n  title: string\n}\n\nconst AddBookForm = (): JSX.Element => {\n  const serviceValue = useContext(MyContext);\n  const dispatch: AppDispatch = useDispatch();\n  const [bookAdded, setBookAdded] = useState(false);\n  const [imageVisible, setImageVisible] = useState(false);\n  const [imageSrc, setImageSrc] = useState('');\n\n  const schema = yup.object().shape({\n    title: yup.string().required('Book Title should be filled in'),\n    author: yup.string().required('Book Author should be filled in'),\n    price: yup.number().required().positive('Book Price should be positive number'),\n    coverImage: yup.mixed().test('fileType', 'Image should be uploaded', (value) => value && value.length !== 0),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    getValues,\n    watch,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const watchImage = watch('coverImage');\n\n  useEffect(() => {\n    if (watchImage) {\n      if (watchImage[0]) {\n        const reader = new FileReader();\n        reader.readAsDataURL(watchImage[0]);\n        reader.onload = () => {\n          const src = reader.result as string;\n          setImageSrc(src);\n        };\n      }\n    }\n  }, [watchImage]);\n\n  const onSubmit = (data: SubmitAddBookData) => {\n    const newData = {\n      title: data.title,\n      author: data.author,\n      price: data.price,\n      coverImage: imageSrc,\n    };\n    dispatch(addBookToCatalogAsync(serviceValue, newData))\n      .then(() => setBookAdded(true));\n\n    setTimeout(() => {\n      setBookAdded(false);\n      reset({});\n      setImageVisible(false);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <form className=\"add-book-form\" onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"inputTitle\" className=\"title-label\">Book Title</label>\n        <input data-testid=\"add-book-input-title\" id=\"inputTitle\" type=\"text\" placeholder=\"title\" {...register('title')} />\n        {errors.title && (<p>{errors.title.message}</p>)}\n\n        <label htmlFor=\"inputAuthor\">Book Author</label>\n        <input data-testid=\"add-book-input-author\" id=\"inputAuthor\" type=\"text\" placeholder=\"author\" {...register('author')} />\n        {errors.author && (<p>{errors.author.message}</p>)}\n\n        <label htmlFor=\"inputPrice\">Book Price</label>\n        <input data-testid=\"add-book-input-price\" id=\"inputPrice\" type=\"number\" placeholder=\"price in $\" {...register('price')} />\n        {errors.price && (getValues('price') === '') && (<p>Book Price should be filled in</p>)}\n        {errors.price && (getValues('price') < 0) && (<p>{errors.price.message}</p>)}\n\n        <label htmlFor=\"temp-id\">Book Cover Image</label>\n        <label className=\"upload-file-btn\">\n          Browse\n          <input data-testid=\"add-book-input-image\" type=\"file\" id=\"file1\" accept=\".png, .jpg, .jpeg\" {...register('coverImage')} />\n        </label>\n\n        {watchImage && (watchImage.length !== 0)\n                && (<img data-testid=\"add-book-image\" id=\"image1\" alt=\"cover_image1\" width=\"120px\" height=\"200px\" src={imageSrc} />)}\n        {errors.coverImage && !imageVisible && (<p>{errors.coverImage.message}</p>)}\n\n        <input data-testid=\"add-book-submit-btn\" type=\"submit\" value=\"Add new book\" className=\"btn btn-info\" />\n        {bookAdded && (<p className=\"book-added-confirmation\">Book successfully added</p>)}\n      </form>\n    </div>\n  );\n};\n\nexport default AddBookForm;\n","import SearchField from './search-field';\n\nexport default SearchField;\n","import React, { FC } from 'react';\nimport './search-field.css';\n\ninterface SearchFieldType {\n    keyword: string,\n    setKeyword: (value: string) => void\n}\n\nconst SearchField: FC<SearchFieldType> = ({ keyword, setKeyword }) => (\n  <div className=\"search-field\">\n    <span className=\"search-title\">Find your book</span>\n    <input\n      data-testid=\"search-field\"\n      className=\"search\"\n      key=\"random1\"\n      value={keyword}\n      placeholder=\"search book\"\n      onChange={(e) => setKeyword(e.target.value)}\n    />\n  </div>\n);\n\nexport default SearchField;\n","import React, { FC, MouseEvent } from 'react';\nimport '../book-list/book-list.css';\nimport { useDispatch } from 'react-redux';\nimport { BookData } from '../../services/bookstore-service';\nimport { addBookToCart } from '../../actions';\n\ninterface BookListItemInterface {\n  book: BookData,\n  style: React.CSSProperties | undefined\n  switchDisplayEditForm: (event: MouseEvent<HTMLButtonElement>) => void\n}\n\nconst BookListItem: FC<BookListItemInterface> = (\n  {\n    book,\n    style,\n    switchDisplayEditForm,\n  },\n) => {\n  const dispatch = useDispatch();\n  const {\n    id, title, author, price, coverImage,\n  } = book;\n  const testId = `book-${id}`;\n  const addToCartBtnTestId = `add-to-cart-btn-${id}`;\n  const editBookBtnTestId = `edit-book-btn-${id}`;\n  return (\n    <div className=\"book-list-item\" style={style} data-testid={testId}>\n      <div className=\"book-cover\">\n        <img src={coverImage} alt=\"cover\" />\n      </div>\n      <div className=\"book-details\">\n        <span className=\"book-title\" data-testid=\"book-title\">{title}</span>\n        <div className=\"book-author\" data-testid=\"book-author\">{author}</div>\n        <div className=\"book-price\" data-testid=\"book-price\">\n          $\n          {price}\n        </div>\n        <div>\n          <button\n            type=\"button\"\n            className=\"btn btn-info add-to-cart\"\n            onClick={() => dispatch(addBookToCart(id))}\n            data-testid={addToCartBtnTestId}\n          >\n            Add to cart\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-info edit-book\"\n            onClick={(event) => switchDisplayEditForm(event)}\n            data-id={id}\n            data-testid={editBookBtnTestId}\n          >\n            Edit Book\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookListItem;\n","import BookList from './book-list';\n\nexport default BookList;\n","import React, {\n  MouseEvent, useCallback, useState, useMemo, useContext, useEffect,\n} from 'react';\nimport './book-list.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { List, AutoSizer, WindowScroller } from 'react-virtualized';\nimport { fetchBooksAsync } from '../../actions';\nimport Spinner from '../spiner';\nimport ErrorIndicator from '../error-indicator';\nimport { RootState } from '../../reducers';\nimport MyContext from '../bookstore-service-context/bookstore-service-context';\nimport UpdateBookForm from '../update-book-form';\nimport AddBookForm from '../add-book-form';\nimport SearchField from '../search-field';\nimport BookListItem from '../book-list-item/book-list-item';\n\nexport interface RowRenderItemType {\n  index: number,\n  key: string,\n  style: React.CSSProperties | undefined\n}\n\nconst BookListContainer = (): JSX.Element => {\n  const [input, setInput] = useState('');\n  const [updateBookId, setUpdateBookId] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  const [value, setValue] = useState<number | null>(null);\n\n  const setUpdateBookFormVisible = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      if (event.currentTarget.dataset.id) {\n        setUpdateBookId(Number(event.currentTarget.dataset.id));\n        setValue(Number(event.currentTarget.dataset.id));\n      }\n      setIsVisible(true);\n    }, [],\n  );\n\n  const setAddBookFormVisible = useCallback(() => {\n    if (!isVisible || !value) {\n      setIsVisible(!isVisible);\n    }\n    setValue(null);\n  }, [isVisible, value]);\n\n  const isAddNewBook = useMemo(() => isVisible && !value, [isVisible, value]);\n\n  const isEditBook = useMemo(() => isVisible && value, [isVisible, value]);\n\n  const upBookList = useSelector((state: RootState) => state.bookList);\n\n  const serviceValue = useContext(MyContext);\n\n  const dispatch = useDispatch();\n\n  const { books, loading, error } = upBookList;\n\n  const savedBookList = useMemo(\n    () => books.filter(\n      (item) => item.title.toLowerCase().includes(input.toLowerCase()),\n    ),\n    [input, books],\n  );\n\n  useEffect(\n    () => { dispatch(fetchBooksAsync(serviceValue)); }, [dispatch, serviceValue],\n  );\n\n  const rowRendererItem = ({ index, key, style }: RowRenderItemType) => {\n    const book = savedBookList[index];\n    if (book) {\n      return (\n        <BookListItem\n          book={book}\n          key={key}\n          style={style}\n          switchDisplayEditForm={setUpdateBookFormVisible}\n        />\n      );\n      // const {\n      //   id, title, author, price, coverImage,\n      // } = book;\n      // const testId = `book-${id}`;\n      // const addToCartBtnTestId = `add-to-cart-btn-${id}`;\n      // const editBookBtnTestId = `edit-book-btn-${id}`;\n      // return (\n      //   <div className=\"book-list-item\" style={style} key={key} data-testid={testId}>\n      //     <div className=\"book-cover\">\n      //       <img src={coverImage} alt=\"cover\" />\n      //     </div>\n      //     <div className=\"book-details\">\n      //       <span className=\"book-title\" data-testid=\"book-title\">{title}</span>\n      //       <div className=\"book-author\" data-testid=\"book-author\">{author}</div>\n      //       <div className=\"book-price\" data-testid=\"book-price\">\n      //         $\n      //         {price}\n      //       </div>\n      //       <div>\n      //         <button\n      //           type=\"button\"\n      //           className=\"btn btn-info add-to-cart\"\n      //           onClick={() => dispatch(addBookToCart(id))}\n      //           data-testid={addToCartBtnTestId}\n      //         >\n      //           Add to cart\n      //         </button>\n      //         <button\n      //           type=\"button\"\n      //           className=\"btn btn-info edit-book\"\n      //           onClick={setUpdateBookFormVisible}\n      //           data-id={id}\n      //           data-testid={editBookBtnTestId}\n      //         >\n      //           Edit Book\n      //         </button>\n      //       </div>\n      //     </div>\n      //   </div>\n      // );\n    } return null;\n  };\n\n  if (loading) {\n    return (<Spinner />);\n  }\n\n  if (error) {\n    return (<ErrorIndicator />);\n  }\n\n  return (\n    <div>\n      <SearchField keyword={input} setKeyword={setInput} />\n      <button data-testid=\"add-book-btn\" type=\"button\" className=\"btn btn-info show-add-new-book\" onClick={setAddBookFormVisible}>\n        Add Book\n      </button>\n\n      {isAddNewBook && (<AddBookForm />)}\n\n      {\n        isEditBook && (\n        <UpdateBookForm\n          bookId={updateBookId}\n          switchDisplayEditForm={() => setIsVisible(false)}\n        />\n        )\n      }\n\n      <div>\n        <WindowScroller>\n          {({ height, registerChild, scrollTop }) => (\n            <div ref={(el) => registerChild(el)} className=\"book-list\">\n              <AutoSizer disableHeight>\n                {\n                  ({ width }) => (\n                    <List\n                      width={width}\n                      height={height}\n                      rowCount={savedBookList.length}\n                      rowHeight={220}\n                      autoHeight\n                      scrollTop={scrollTop}\n                      rowRenderer={rowRendererItem}\n                    />\n                  )\n                }\n              </AutoSizer>\n            </div>\n          )}\n        </WindowScroller>\n      </div>\n\n    </div>\n  );\n};\n\nexport default BookListContainer;\n","import React from 'react';\nimport BookListContainer from '../book-list';\n\nconst CatalogPage = (): JSX.Element => (\n  <div>\n    <BookListContainer />\n  </div>\n);\n\nexport default CatalogPage;\n","import ShoppingBookCartItem from './shopping-book-cart-item';\n\nexport default ShoppingBookCartItem;\n","import React, { FC, useMemo } from 'react';\nimport './shopping-book-cart-item.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addBookToCart,\n  removeBookFromCart,\n  removeAllBooksFromCart,\n} from '../../actions';\nimport { getBookItemById } from '../../reducers/selectors';\n\ninterface ShoppingBookCartItemType {\n  item:\n      {id: number,\n      amount: number\n    }\n  idx: number\n}\n\nconst ShoppingBookCartItem: FC<ShoppingBookCartItemType> = ({ item, idx }) => {\n  const dispatch = useDispatch();\n\n  const { id, amount } = item;\n  const bookItemSelector = useSelector(getBookItemById);\n  const bookItem = useMemo(() => bookItemSelector(item.id), [item.id]);\n  const itemImageTestId = `item-image-${id}`;\n  const itemTitleTestId = `item-title-${id}`;\n  const itemAmountTestId = `item-amount-${id}`;\n  const itemPriceTestId = `item-price-${id}`;\n  const itemAllRemoveBtnTestId = `item-all-remove-btn-${id}`;\n  const itemRemoveBtnTestId = `item-remove-btn-${id}`;\n  const itemAddBtnTestId = `item-add-btn-${id}`;\n  if (!bookItem) {\n    return <></>;\n  }\n  const { title, price, coverImage } = bookItem;\n\n  return (\n    <tr key={id}>\n      <td>{idx + 1}</td>\n      <td data-testid={itemImageTestId}>\n        <div className=\"book-coverage\">\n          <img src={coverImage} alt=\"cover\" />\n        </div>\n      </td>\n      <td data-testid={itemTitleTestId}>{title}</td>\n      <td data-testid={itemAmountTestId}>{amount}</td>\n      <td data-testid={itemPriceTestId}>\n        $\n        {price * amount}\n      </td>\n      <td>\n        <button\n          data-testid={itemAllRemoveBtnTestId}\n          type=\"button\"\n          onClick={() => dispatch(removeAllBooksFromCart(id))}\n          className=\"btn btn-outline-danger btn-sm float-right\"\n        >\n          <i className=\"fa fa-trash-o\" />\n        </button>\n        <button\n          data-testid={itemAddBtnTestId}\n          type=\"button\"\n          onClick={() => dispatch(addBookToCart(id))}\n          className=\"btn btn-outline-success btn-sm float-right\"\n        >\n          <i className=\"fa fa-plus-circle\" />\n        </button>\n        <button\n          data-testid={itemRemoveBtnTestId}\n          type=\"button\"\n          onClick={() => dispatch(removeBookFromCart(id))}\n          className=\"btn btn-outline-warning btn-sm float-right\"\n        >\n          <i className=\"fa fa-minus-circle\" />\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ShoppingBookCartItem;\n","import ShoppingCartTable from './shopping-cart-table';\n\nexport default ShoppingCartTable;\n","import React, { useContext, useEffect } from 'react';\nimport './shopping-cart-table.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ShoppingBookCartItem from '../shopping-book-cart-item';\nimport { getCartItemsList, getTotalSum } from '../../reducers/selectors';\nimport MyContext from '../bookstore-service-context';\nimport { fetchBooksAsync } from '../../actions';\n\nconst ShoppingCartTable = (): JSX.Element => {\n  // block added here in order to set all books in state when page is loaded\n  const dispatch = useDispatch();\n  const serviceValue = useContext(MyContext);\n  useEffect(\n    () => {\n      dispatch(fetchBooksAsync(serviceValue));\n    },\n    [dispatch, serviceValue],\n  );\n\n  const totalSum = useSelector(getTotalSum);\n  const cartItems = useSelector(getCartItemsList);\n\n  return (\n    <div className=\"shopping-cart-table\">\n      <h2>Your Order</h2>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th data-testid=\"shopping-cart-item-header\">Item</th>\n            <th data-testid=\"shopping-cart-title-header\" className=\"title\">Title</th>\n            <th data-testid=\"shopping-cart-count-header\">Count</th>\n            <th data-testid=\"shopping-cart-price-header\">Price</th>\n            <th data-testid=\"shopping-cart-action-header\">Action</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          { cartItems.map(\n            (item, idx) => <ShoppingBookCartItem key={item.id} idx={idx} item={item} />,\n          )}\n        </tbody>\n      </table>\n\n      <div data-testid=\"shopping-cart-total\" className=\"total\">\n        Total: $\n        {totalSum}\n      </div>\n    </div>\n  );\n};\n\nexport default ShoppingCartTable;\n","import React from 'react';\nimport ShoppingCartTable from '../shopping-cart-table';\n\nconst ShoppingCardPage = (): JSX.Element => (\n  <div>\n    <ShoppingCartTable />\n  </div>\n);\n\nexport default ShoppingCardPage;\n","import React from 'react';\n\nconst MainPage = (): JSX.Element => (\n  <div>\n    Welcome to Book Store Main Page\n  </div>\n);\n\nexport default MainPage;\n","import ShopHeader from './shop-header';\n\nexport default ShopHeader;\n","import React, { FC } from 'react';\nimport './shop-header.css';\nimport { Link } from 'react-router-dom';\n\ntype ShopHeaderType = {\n  numItems: number,\n  total: number\n}\n\nconst ShopHeader:FC<ShopHeaderType> = ({ numItems, total }) => (\n  <header className=\"shop-header row\">\n    <Link to=\"/\">\n      <div data-testid=\"link-to-main-page\" className=\"logo text-dark\">ReStore</div>\n    </Link>\n    <div className=\"shop-items\">\n      <Link to=\"/catalog\">\n        <div data-testid=\"link-to-catalog\" className=\"store\">Books Catalog</div>\n      </Link>\n      <Link to=\"/items\">\n        <div className=\"shopping-cart\" data-testid=\"link-to-shopping-cart\">\n          <i className=\"cart-icon fa fa-shopping-cart\" />\n          {numItems}\n          {' '}\n          items ($\n          {total}\n          )\n        </div>\n      </Link>\n    </div>\n\n  </header>\n);\n\nexport default ShopHeader;\n","import App from './app';\n\nexport default App;\n","import React from 'react';\nimport './app.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { CatalogPage, MainPage, ShoppingCardPage } from '../pages';\nimport ShopHeader from '../shop-header';\nimport { getTotalAmount, getTotalSum } from '../../reducers/selectors';\n\nconst App = (): JSX.Element => {\n  const totalSum = useSelector(getTotalSum);\n  const totalAmount = useSelector(getTotalAmount);\n\n  return (\n    <main role=\"main\" className=\"container\">\n      <ShopHeader numItems={totalAmount} total={totalSum} />\n      <Switch>\n        <Route\n          path=\"/\"\n          component={MainPage}\n          exact\n        />\n        <Route\n          path=\"/catalog\"\n          component={CatalogPage}\n          exact\n        />\n        <Route\n          path=\"/items\"\n          component={ShoppingCardPage}\n        />\n      </Switch>\n    </main>\n  );\n};\n\nexport default App;\n","import ErrorBoundary from './error-boundary';\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport ErrorIndicator from '../error-indicator';\n\ninterface HasErrorType {\n  hasError: boolean\n}\n\nexport default class ErrorBoundary extends\n  Component<{ children: JSX.Element }, { hasErrorValue: HasErrorType }> {\n  constructor(props: never) {\n    super(props);\n    this.state = {\n      hasErrorValue: {\n        hasError: false,\n      },\n    };\n  }\n\n  componentDidCatch(): void {\n    this.setState({\n      hasErrorValue: {\n        hasError: false,\n      },\n    });\n  }\n\n  render(): JSX.Element {\n    const { hasErrorValue } = this.state;\n    const { children } = this.props;\n    if (hasErrorValue.hasError) {\n      return <ErrorIndicator />;\n    }\n\n    return children.props.children;\n  }\n}\n","import { AnyAction } from 'redux';\nimport { BookData } from '../services/bookstore-service';\nimport RequestStatus from '../services/requestStatus';\n\nconst initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  status: RequestStatus.PENDING,\n};\n\ninterface BookListType {\n    books: Array<BookData>,\n    loading: boolean,\n    error: Error | null,\n    status: RequestStatus\n}\n\nconst bookList = (state: BookListType = initialState, action: AnyAction): BookListType => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUEST_PENDING':\n      return {\n        books: [],\n        loading: true,\n        error: null,\n        status: action.payload,\n      };\n\n    case 'FETCH_BOOKS_REQUEST_SUCCESS':\n      return {\n        books: action.payload.newBooks,\n        loading: false,\n        error: null,\n        status: action.payload.status,\n      };\n\n    case 'FETCH_BOOKS_REQUEST_ERROR':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload.error,\n        status: action.payload.status,\n      };\n\n    case 'BOOK_ADDED_TO_CATALOG': {\n      return {\n        ...state,\n        books: state.books.concat(action.payload.newBook),\n        status: action.payload.status,\n      };\n    }\n\n    case 'BOOK_UPDATED_IN_CATALOG': {\n      return {\n        ...state,\n        books: state.books.slice(0, action.payload.updatedBook.id - 1)\n          .concat(action.payload.updatedBook)\n          .concat(state.books.slice(action.payload.updatedBook.id, state.books.length)),\n        status: action.payload.status,\n      };\n    }\n\n    case 'ADD_BOOKS_REQUEST_ERROR':\n    case 'UPDATE_BOOKS_REQUEST_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        status: action.payload.status,\n      };\n\n    case 'ADD_BOOKS_REQUEST_PENDING':\n    case 'UPDATE_BOOKS_REQUEST_PENDING':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default bookList;\n","export interface ShoppingCartType {\n    cartItems: {\n        [id: number] : {id: number, amount: number}\n    }\n}\n\nexport interface BookPayloadType {\n  type: string,\n  payload: {\n    bookId: number,\n    amount: number\n  }\n}\n\nconst initialState = {\n  cartItems: {},\n};\n\nconst shoppingCart = (\n  state: ShoppingCartType = initialState, action: BookPayloadType,\n): ShoppingCartType => {\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART': {\n      const currentAmount = state.cartItems[action.payload.bookId]?.amount ?? 0;\n      return {\n        ...state,\n        cartItems: {\n          ...state.cartItems,\n          [action.payload.bookId]: {\n            id: action.payload.bookId,\n            amount: currentAmount + action.payload.amount,\n          },\n        },\n      };\n    }\n\n    case 'BOOK_REMOVED_TO_CART': {\n      const currentAmount = state.cartItems[action.payload.bookId]?.amount ?? 0;\n      if (currentAmount === 1) {\n        const { [action.payload.bookId]: deletedItem, ...otherItems } = state.cartItems;\n        return {\n          ...state,\n          cartItems: {\n            ...otherItems,\n          },\n        };\n      }\n      return {\n        ...state,\n        cartItems: {\n          ...state.cartItems,\n          [action.payload.bookId]: {\n            id: action.payload.bookId,\n            amount: currentAmount + action.payload.amount,\n          },\n        },\n      };\n    }\n\n    case 'ALL_BOOKS_REMOVED_TO_CART': {\n      const { [action.payload.bookId]: deletedItem, ...otherItems } = state.cartItems;\n      return {\n        ...state,\n        cartItems: {\n          ...otherItems,\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default shoppingCart;\n","import { combineReducers } from 'redux';\nimport bookList from './book-list';\nimport shoppingCart from './shopping-cart';\n\nconst rootReducer = combineReducers({\n  bookList,\n  shoppingCart,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import {\n  createStore, applyMiddleware, compose, AnyAction,\n} from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk, { ThunkDispatch } from 'redux-thunk';\nimport rootReducer, { RootState } from './reducers';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['shoppingCart'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(persistedReducer, composeEnhancer(applyMiddleware(thunk)));\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = ThunkDispatch<RootState, undefined, AnyAction>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/app';\nimport MyContext from './components/bookstore-service-context';\nimport ErrorBoundary from './components/error-boundary';\nimport BookstoreService from './services/bookstore-service';\nimport { persistor, store } from './store';\n\nconst bookstoreService = new BookstoreService();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ErrorBoundary>\n        <MyContext.Provider value={bookstoreService}>\n          <Router>\n            <App />\n          </Router>\n        </MyContext.Provider>\n      </ErrorBoundary>\n    </PersistGate>\n\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}